version: 2.1

jobs:
  test:
    docker:
      - image: cimg/python:3.12 
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          name: Run Unit Tests
          command: |
            pytest tests/

  build-and-deploy:
    docker:
      - image: cimg/aws:2024.03
    steps:
      - checkout
      - setup_remote_docker # Required for building and pushing Docker images
      - run:
          name: Debug Environment Variables
          command: |
            echo "AWS_ROLE_ARN: $AWS_ROLE_ARN"
            echo "AWS_REGION: $AWS_REGION"
            echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"
            echo "CIRCLE_WORKFLOW_ID: $CIRCLE_WORKFLOW_ID"
            echo "CIRCLE_JOB: $CIRCLE_JOB"
            echo "CIRCLE_OIDC_TOKEN: $CIRCLE_OIDC_TOKEN"
      - run:
          name: Setup AWS CLI
          command: |
            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
               --role-arn ${AWS_ROLE_ARN} \
               --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}" \
               --web-identity-token $CIRCLE_OIDC_TOKEN \
               --duration-seconds 3600 \
               --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
               --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $BASH_ENV
      - run:
          name: Confirm OIDC Authentication
          command: aws sts get-caller-identity
      - run:
          name: Log in to AWS ECR
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - run:
          name: Build Docker Image
          command: |
            IMAGE_NAME=asphalt-green-google-calendar
            IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME
            docker build -t $IMAGE_URI .
            echo "export IMAGE_URI=$IMAGE_URI" >> $BASH_ENV
      - run:
          name: Push Docker Image to ECR
          command: |
            docker push $IMAGE_URI
      - run:
          name: Update AWS Lambda
          command: |
            aws lambda update-function-code \
              --function-name asphalt-green-google-calendar \
              --image-uri $IMAGE_URI

workflows:
  version: 2
  ci-cd:
    jobs:
      - test
      - build-and-deploy:
          requires:
            - test
